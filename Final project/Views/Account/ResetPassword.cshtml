@model ResetPasswordVM
@{
    ViewData["Title"] = "Reset Password";
    Layout = "_AccountPageLayout";
}

<!-- Animated Background -->
<div class="animated-bg">
    <div class="floating-shape" style="width: 60px; height: 60px; background: linear-gradient(135deg, var(--amazon-orange), var(--amazon-hover)); border-radius: 30%; opacity: 0.1;"></div>
    <div class="floating-shape" style="width: 80px; height: 80px; background: linear-gradient(135deg, var(--amazon-blue), var(--amazon-light-blue)); border-radius: 50%; opacity: 0.08;"></div>
    <div class="floating-shape" style="width: 40px; height: 40px; background: linear-gradient(135deg, var(--amazon-gold), var(--amazon-orange)); border-radius: 50%; opacity: 0.12;"></div>
    <div class="floating-shape" style="width: 70px; height: 70px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 40%; opacity: 0.1;"></div>
</div>

<!-- Particles -->
<div class="particles">
    <div class="particle" style="left: 10%; animation-delay: 0s;"></div>
    <div class="particle" style="left: 20%; animation-delay: 1s;"></div>
    <div class="particle" style="left: 30%; animation-delay: 2s;"></div>
    <div class="particle" style="left: 40%; animation-delay: 3s;"></div>
    <div class="particle" style="left: 50%; animation-delay: 4s;"></div>
    <div class="particle" style="left: 60%; animation-delay: 5s;"></div>
    <div class="particle" style="left: 70%; animation-delay: 6s;"></div>
    <div class="particle" style="left: 80%; animation-delay: 7s;"></div>
    <div class="particle" style="left: 90%; animation-delay: 8s;"></div>
</div>

<div class="container-fluid">
    <div class="row justify-content-center align-items-center min-vh-100">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
            <div class="register-container">
                <!-- Logo -->
                <div class="logo-container">
                    <div class="logo">
                        <i class="fa-brands fa-amazon"></i>
                    </div>
                </div>

                <!-- Reset Password Header -->
                <div class="reset-password-header">
                    <div class="security-icon-container">
                        <i class="fas fa-lock-open"></i>
                    </div>
                    <div class="welcome-text">
                        Create New Password
                    </div>
                    <p class="reset-subtitle">Enter your new password below. Make sure it's strong and secure.</p>
                </div>

                <!-- Reset Password Form -->
                <form method="post" asp-action="ResetPassword" asp-controller="Account">
                    <input type="hidden" asp-for="UserId" />
                    <input type="hidden" asp-for="Token" />

                    <div asp-validation-summary="ModelOnly" class="validation-summary" role="alert">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>

                    <div class="form-group">
                        <span asp-validation-for="Password" class="text-danger"></span>
                        <input type="password"
                               class="form-control"
                               asp-for="Password"
                               id="password"
                               placeholder="New Password"
                               required />
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('password', this)"></i>
                    </div>

                    <div class="form-group">
                        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                        <input type="password"
                               class="form-control"
                               asp-for="ConfirmPassword"
                               id="confirmPassword"
                               placeholder="Confirm New Password"
                               required />
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('confirmPassword', this)"></i>
                    </div>

                    <!-- Password Strength Indicator -->
                    <div class="password-strength-container">
                        <div class="strength-indicator">
                            <div class="strength-bar">
                                <div class="strength-fill" id="strengthFill"></div>
                            </div>
                            <small class="strength-text" id="strengthText">Password strength will appear here</small>
                        </div>
                    </div>

                    <!-- Password Requirements -->
                    <div class="password-requirements">
                        <div class="requirements-header">
                            <i class="fas fa-shield-alt"></i>
                            <span>Password Requirements:</span>
                        </div>
                        <div class="requirements-list">
                            <div class="requirement-item" id="req-length">
                                <i class="fas fa-circle requirement-icon"></i>
                                <span>At least 6 characters long</span>
                            </div>
                            <div class="requirement-item" id="req-uppercase">
                                <i class="fas fa-circle requirement-icon"></i>
                                <span>Contains uppercase letter</span>
                            </div>
                            <div class="requirement-item" id="req-lowercase">
                                <i class="fas fa-circle requirement-icon"></i>
                                <span>Contains lowercase letter</span>
                            </div>
                            <div class="requirement-item" id="req-number">
                                <i class="fas fa-circle requirement-icon"></i>
                                <span>Contains a number</span>
                            </div>
                            <div class="requirement-item" id="req-special">
                                <i class="fas fa-circle requirement-icon"></i>
                                <span>Contains special character</span>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn-primary" id="resetBtn">
                        <span class="loading-spinner" id="loadingSpinner"></span>
                        <i class="fas fa-key"></i>
                        Reset Password
                    </button>
                </form>

                <!-- Security Notice -->
                <div class="security-notice">
                    <i class="fas fa-info-circle"></i>
                    <span>For your security, you'll be automatically signed in after resetting your password.</span>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Reset Password Specific Styles */
    .reset-password-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .security-icon-container {
        margin-bottom: 1rem;
        animation: iconPulse 2s ease-in-out infinite;
    }

        .security-icon-container i {
            font-size: 4rem;
            color: #667eea;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            filter: drop-shadow(0 2px 4px rgba(102, 126, 234, 0.3));
        }

    @@keyframes iconPulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }
    }

    .reset-subtitle {
        color: #666;
        font-size: 1rem;
        margin-bottom: 0;
        animation: fadeInUp 0.8s ease-out 0.3s both;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Validation Summary */
    .validation-summary {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        padding: 12px 15px;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        text-align: center;
        border: none;
        animation: slideInDown 0.5s ease-out;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

        .validation-summary i {
            margin-right: 8px;
            font-size: 1.1rem;
        }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Password Strength Container */
    .password-strength-container {
        margin-bottom: 1.5rem;
        animation: fadeIn 0.5s ease-out;
    }

    .strength-indicator {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
    }

        .strength-indicator:hover {
            border-color: var(--amazon-orange);
            box-shadow: 0 2px 10px rgba(255, 153, 0, 0.1);
        }

    .strength-bar {
        width: 100%;
        height: 8px;
        background: linear-gradient(90deg, #e9ecef, #dee2e6);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 8px;
        position: relative;
    }

        .strength-bar::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            animation: shimmer 2s infinite;
        }

    @@keyframes shimmer {
        0% {
            left: -100%;
        }

        100% {
            left: 100%;
        }
    }

    .strength-fill {
        height: 100%;
        width: 0%;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        border-radius: 4px;
        position: relative;
        overflow: hidden;
    }

    .strength-weak {
        background: linear-gradient(90deg, #ff6b6b, #ee5a24);
    }

    .strength-fair {
        background: linear-gradient(90deg, #feca57, #ff9ff3);
    }

    .strength-good {
        background: linear-gradient(90deg, #48dbfb, #0abde3);
    }

    .strength-strong {
        background: linear-gradient(90deg, #1dd1a1, #10ac84);
    }

    .strength-text {
        color: #495057;
        font-weight: 500;
        font-size: 0.875rem;
        animation: textFade 0.3s ease-in-out;
    }

    @@keyframes textFade {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    /* Password Requirements */
    .password-requirements {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: 1px solid #dee2e6;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 1.5rem;
        position: relative;
        overflow: hidden;
        animation: slideUp 0.6s ease-out;
    }

        .password-requirements::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 153, 0, 0.1), transparent);
            animation: backgroundShimmer 3s infinite;
        }

    @@keyframes backgroundShimmer {
        0% {
            left: -100%;
        }

        100% {
            left: 100%;
        }
    }

    .requirements-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 15px;
        color: #495057;
        font-weight: 600;
        font-size: 0.95rem;
    }

        .requirements-header i {
            color: var(--amazon-orange);
            font-size: 1.1rem;
        }

    .requirements-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .requirement-item {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 0.875rem;
        color: #6c757d;
        transition: all 0.3s ease;
        position: relative;
    }

    .requirement-icon {
        font-size: 0.5rem;
        color: #dee2e6;
        transition: all 0.3s ease;
    }

    .requirement-item.valid {
        color: #28a745;
        animation: requirementCheck 0.4s ease-out;
    }

        .requirement-item.valid .requirement-icon {
            color: #28a745;
            transform: scale(1.2);
        }

            .requirement-item.valid .requirement-icon::before {
                content: '\f058';
                font-family: 'Font Awesome 5 Free';
                font-weight: 900;
            }

    @@keyframes requirementCheck {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }

        100% {
            transform: scale(1);
        }
    }

    /* Security Notice */
    .security-notice {
        background: linear-gradient(135deg, #e3f2fd, #bbdefb);
        border: 1px solid #90caf9;
        color: #1976d2;
        padding: 15px 20px;
        border-radius: 12px;
        margin-top: 1.5rem;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 0.875rem;
        animation: fadeInScale 0.8s ease-out 0.5s both;
        position: relative;
        overflow: hidden;
    }

        .security-notice::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: noticeShine 4s ease-in-out infinite;
        }

    @@keyframes noticeShine {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

        .security-notice i {
            font-size: 1rem;
            color: #1976d2;
        }

    /* Enhanced Button */
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 12px;
        padding: 15px 30px;
        font-size: 16px;
        font-weight: 600;
        width: 100%;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        text-transform: uppercase;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        }

        .btn-primary:active {
            transform: translateY(-1px);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
        }

            .btn-primary:disabled:hover {
                transform: none;
                box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
            }

        .btn-primary i {
            font-size: 1.1rem;
            transition: transform 0.3s ease;
        }

        .btn-primary:hover i {
            transform: rotate(15deg);
        }

    /* Loading state */
    .btn-primary.loading .loading-spinner {
        display: inline-block;
    }

    .btn-primary.loading i {
        display: none;
    }

    /* Responsive Design */
    @@media (max-width: 576px) {
        .register-container {
            padding: 1.5rem;
        }

        .security-icon-container i {
            font-size: 3rem;
        }

        .password-requirements,
        .strength-indicator {
            padding: 15px;
        }

        .requirement-item {
            font-size: 0.8rem;
        }

        .security-notice {
            font-size: 0.8rem;
            padding: 12px 15px;
        }
    }

    /* Focus states for accessibility */
    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary:focus {
        outline: 2px solid #667eea;
        outline-offset: 2px;
    }
</style>

@section Scripts {
        <script>
            // Toggle password visibility
            function togglePassword(fieldId, icon) {
                const passwordField = document.getElementById(fieldId);
                const isPassword = passwordField.type === 'password';

                passwordField.type = isPassword ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');

                // Add animation effect
                icon.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    icon.style.transform = 'scale(1)';
                }, 150);
            }

            // Password strength checker
            function checkPasswordStrength(password) {
                const strengthFill = document.getElementById('strengthFill');
                const strengthText = document.getElementById('strengthText');

                let score = 0;
                let feedback = '';

                // Length check
                if (password.length >= 6) score += 1;
                if (password.length >= 10) score += 1;

                // Character variety checks
                if (/[a-z]/.test(password)) score += 1;
                if (/[A-Z]/.test(password)) score += 1;
                if (/[0-9]/.test(password)) score += 1;
                if (/[^A-Za-z0-9]/.test(password)) score += 1;

                // Update visual indicator
                const percentage = (score / 6) * 100;
                strengthFill.style.width = percentage + '%';

                // Remove existing strength classes
                strengthFill.classList.remove('strength-weak', 'strength-fair', 'strength-good', 'strength-strong');

                if (score <= 2) {
                    strengthFill.classList.add('strength-weak');
                    feedback = 'Weak password - Consider adding more characters';
                } else if (score <= 4) {
                    strengthFill.classList.add('strength-fair');
                    feedback = 'Fair password - Almost there!';
                } else if (score <= 5) {
                    strengthFill.classList.add('strength-good');
                    feedback = 'Good password - Well done!';
                } else {
                    strengthFill.classList.add('strength-strong');
                    feedback = 'Strong password - Excellent!';
                }

                strengthText.textContent = feedback;
            }

            // Password requirements checker
            function checkPasswordRequirements(password) {
                const requirements = {
                    'req-length': password.length >= 6,
                    'req-uppercase': /[A-Z]/.test(password),
                    'req-lowercase': /[a-z]/.test(password),
                    'req-number': /[0-9]/.test(password),
                    'req-special': /[^A-Za-z0-9]/.test(password)
                };

                for (const [reqId, isValid] of Object.entries(requirements)) {
                    const element = document.getElementById(reqId);
                    if (isValid) {
                        element.classList.add('valid');
                    } else {
                        element.classList.remove('valid');
                    }
                }

                // Enable/disable submit button based on basic requirements
                const basicRequirementsMet = requirements['req-length'] &&
                                            (requirements['req-uppercase'] || requirements['req-lowercase']);
                const resetBtn = document.getElementById('resetBtn');
                resetBtn.disabled = !basicRequirementsMet;

                if (basicRequirementsMet) {
                    resetBtn.style.opacity = '1';
                } else {
                    resetBtn.style.opacity = '0.6';
                }
            }

            // Enhanced form submission
            function handleFormSubmit(event) {
                const resetBtn = document.getElementById('resetBtn');
                const loadingSpinner = document.getElementById('loadingSpinner');

                resetBtn.classList.add('loading');
                resetBtn.disabled = true;
                resetBtn.innerHTML = '<span class="loading-spinner"></span>Resetting Password...';

                // Simulate loading (remove this in production)
                setTimeout(() => {
                    resetBtn.classList.remove('loading');
                    resetBtn.disabled = false;
                    resetBtn.innerHTML = '<i class="fas fa-key"></i>Reset Password';
                }, 3000);
            }

            // Event listeners
            document.addEventListener('DOMContentLoaded', function() {
                const passwordField = document.getElementById('password');
                const confirmPasswordField = document.getElementById('confirmPassword');
                const form = document.querySelector('form');

                // Add form submit handler
                form.addEventListener('submit', handleFormSubmit);

                passwordField.addEventListener('input', function() {
                    const password = this.value;
                    checkPasswordStrength(password);
                    checkPasswordRequirements(password);
                    validatePasswordMatch();
                });

                confirmPasswordField.addEventListener('input', validatePasswordMatch);

                function validatePasswordMatch() {
                    const password = passwordField.value;
                    const confirmPassword = confirmPasswordField.value;

                    if (confirmPassword && password !== confirmPassword) {
                        confirmPasswordField.setCustomValidity('Passwords do not match');
                        confirmPasswordField.style.borderColor = '#dc3545';
                    } else {
                        confirmPasswordField.setCustomValidity('');
                        confirmPasswordField.style.borderColor = '#e0e0e0';
                    }
                }

                // Enhanced input animations
                document.querySelectorAll('.form-control').forEach(input => {
                    input.addEventListener('focus', function() {
                        this.parentElement.classList.add('focused');
                        this.style.transform = 'translateY(-2px)';
                    });

                    input.addEventListener('blur', function() {
                        this.parentElement.classList.remove('focused');
                        this.style.transform = 'translateY(0)';
                    });

                    // Add typing animation
                    input.addEventListener('input', function() {
                        this.style.transform = 'scale(1.02)';
                        setTimeout(() => {
                            this.style.transform = 'scale(1)';
                        }, 100);
                    });
                });

                // Add particle animation to the page
                createParticles();
            });

            // Create floating particles
            function createParticles() {
                const particlesContainer = document.querySelector('.particles');
                const colors = ['var(--amazon-orange)', 'var(--amazon-blue)', '#667eea', '#764ba2'];

                for (let i = 0; i < 15; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    particle.style.left = Math.random() * 100 + '%';
                    particle.style.animationDelay = Math.random() * 8 + 's';
                    particle.style.background = colors[Math.floor(Math.random() * colors.length)];
                    particle.style.width = (Math.random() * 4 + 2) + 'px';
                    particle.style.height = particle.style.width;
                    particlesContainer.appendChild(particle);
                }
            }
        </script>
}