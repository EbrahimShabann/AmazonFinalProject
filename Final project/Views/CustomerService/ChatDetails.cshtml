@using Final_project.ViewModel.CustomerService
@model ChatDetailsViewModel
@{
    ViewData["Title"] = $"Chat - {Model.Session.CustomerName} & {Model.Session.SellerName}";
}

@section Styles {
    <link rel="stylesheet" href="~/css/CustomerService.css" asp-append-version="true" />
}
<link href="/css/CustomerProfile.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        @if (!User.IsInRole("seller"))
        {
            <partial name="_SideBar" />
        }

        <div class="col-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Chats")">Chat Sessions</a></li>
                    <li class="breadcrumb-item active">@Model.Session.CustomerName & @Model.Session.SellerName</li>
                </ol>
            </nav>

            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-comments"></i>
                        @Model.Session.CustomerName ↔ @Model.Session.SellerName
                    </h5>
                    <span class="badge bg-@(Model.Session.Status == "Active" ? "success" : "secondary")">
                        @Model.Session.Status
                    </span>
                </div>
                <div class="card-body p-0">
                    <!-- Chat Messages -->
                    <div id="chat-messages" class="p-3" style="height: 500px; overflow-y: auto; background-color: #f8f9fa;">
                        @if (Model.Messages.Any())
                        {
                            @foreach (var message in Model.Messages.OrderBy(m => m.SentAt))
                            {
                                <div class="message mb-3 @(message.IsFromCurrentUser ? "text-end" : "")">
                                    <div class="d-inline-block p-3 rounded @(message.IsFromCurrentUser ? "bg-primary text-white" : "bg-white border")" style="max-width: 70%;">
                                        <div>@message.Message</div>
                                        <small class="@(message.IsFromCurrentUser ? "text-white-50" : "text-muted")">
                                            @message.SenderName - @message.SentAt?.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <i class="fas fa-comments fa-2x mb-2"></i>
                                <p>No messages yet. Start the conversation!</p>
                            </div>
                        }
                    </div>

                    <!-- Message Input -->
                    @if (Model.Session.Status == "Active")
                    {
                        <div class="border-top p-3">
                            <form id="chatMessageForm" asp-action="SendChatMessage" method="post" data-session-id="@Model.Session.Id" data-sender-id="@Model.CurrentUserId">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="SessionId" value="@Model.Session.Id" />
                                <div class="input-group">
                                    <input type="text" id="chatMessage" name="Message" class="form-control" placeholder="Type your message..." required />
                                    <button type="submit" class="btn btn-primary" id="sendButton">
                                        <i class="fas fa-paper-plane"></i> Send
                                    </button>
                                </div>
                            </form>
                        </div>
                    }
                    else
                    {
                        <div class="border-top p-3 text-center text-muted">
                            <i class="fas fa-lock"></i> This chat session has been closed.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const currentUserId = '@Model.CurrentUserId';
            const sessionId = '@Model.Session.Id';
            const chatMessages = document.getElementById('chat-messages');
            const chatForm = document.getElementById('chatMessageForm');
            const messageInput = document.getElementById('chatMessage');
            const sendButton = document.getElementById('sendButton');

            // Auto-scroll to bottom
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Function to add message to chat UI
            function addMessageToChat(message, isFromCurrentUser, senderName, sentAt) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message mb-3 ${isFromCurrentUser ? 'text-end' : ''}`;

                const timeString = new Date(sentAt).toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });

                messageDiv.innerHTML = `
                    <div class="d-inline-block p-3 rounded ${isFromCurrentUser ? 'bg-primary text-white' : 'bg-white border'}" style="max-width: 70%;">
                        <div>${message}</div>
                        <small class="${isFromCurrentUser ? 'text-white-50' : 'text-muted'}">
                            ${senderName} - ${timeString}
                        </small>
                    </div>
                `;

                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Function to poll for new messages
            function pollForMessages() {
                fetch(`@Url.Action("GetChatMessages")?sessionId=${sessionId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.messages) {
                        // Clear existing messages
                        chatMessages.innerHTML = '';

                        if (data.messages.length === 0) {
                            chatMessages.innerHTML = `
                                <div class="text-center text-muted">
                                    <i class="fas fa-comments fa-2x mb-2"></i>
                                    <p>No messages yet. Start the conversation!</p>
                                </div>
                            `;
                        } else {
                            // Add all messages
                            data.messages.forEach(msg => {
                                addMessageToChat(msg.message, msg.isFromCurrentUser, msg.senderName, msg.sentAt);
                            });
                        }
                    }
                })
                .catch(error => {
                    console.error('Error polling for messages:', error);
                });
            }

            // Poll for new messages every 3 seconds
            setInterval(pollForMessages, 3000);

            // Handle form submission
            if (chatForm) {
                chatForm.addEventListener('submit', function (event) {
                    event.preventDefault();

                    const messageText = messageInput.value.trim();
                    if (!messageText) {
                        return;
                    }

                    // Disable send button to prevent double-sending
                    sendButton.disabled = true;
                    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';

                    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch('@Url.Action("SendChatMessage")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: new URLSearchParams({
                            'SessionId': sessionId,
                            'Message': messageText,
                            '__RequestVerificationToken': antiForgeryToken
                        })
                    })
                    .then(response => {
                        console.log('Response status:', response.status);
                        console.log('Response ok:', response.ok);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        // Check if response is actually JSON
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json();
                        } else {
                            // If it's not JSON, it might be a redirect or HTML response
                            console.warn('Response is not JSON, got:', contentType);
                            return response.text().then(text => {
                                console.log('Response text:', text);
                                // If we got here, the message was likely sent successfully
                                // but the server returned a redirect or HTML instead of JSON
                                return { success: true, wasRedirect: true };
                            });
                        }
                    })
                    .then(data => {
                        console.log('Parsed response data:', data);

                        if (data.success || data.wasRedirect) {
                            // Clear input
                            messageInput.value = '';
                            messageInput.focus();

                            // Add the sent message immediately to the UI
                            if (data.message) {
                                addMessageToChat(data.message.message, true, data.message.senderName, data.message.sentAt);
                            } else if (data.wasRedirect) {
                                // If it was a redirect, add the message manually and refresh messages
                                addMessageToChat(messageText, true, 'You', new Date().toISOString());
                                // Trigger a refresh of messages after a short delay
                                setTimeout(pollForMessages, 500);
                            }
                        } else {
                            console.error('Error sending message:', data.errors || data.error || data.details);
                            alert('Failed to send message: ' + (data.error || data.details || 'Please try again.'));
                        }
                    })
                    .catch(error => {
                        console.error('Network or server error:', error);
                        console.error('Error details:', {
                            message: error.message,
                            stack: error.stack,
                            sessionId: sessionId,
                            messageText: messageText
                        });
                        alert(`Error: ${error.message}. Please check the console for details.`);
                    })
                    .finally(() => {
                        // Re-enable send button
                        sendButton.disabled = false;
                        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
                    });
                });
            }

            // Allow sending message with Enter key
            if (messageInput) {
                messageInput.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter' && !event.shiftKey) {
                        event.preventDefault();
                        chatForm.dispatchEvent(new Event('submit'));
                    }
                });
            }
        });
    </script>
}