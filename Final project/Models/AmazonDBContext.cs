// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace Final_project.Models;

public partial class AmazonDBContext : IdentityDbContext<ApplicationUser>
{
    public AmazonDBContext()
    {
    }

    public AmazonDBContext(DbContextOptions<AmazonDBContext> options)
        : base(options)
    {
    }

    // Add missing DbSets
    public virtual DbSet<audit_log> audit_logs { get; set; }
    public virtual DbSet<cart_item> cart_items { get; set; }
    public virtual DbSet<category> categories { get; set; }
    public virtual DbSet<discount> discounts { get; set; }
    public virtual DbSet<order> orders { get; set; }
    public virtual DbSet<order_history> order_histories { get; set; }
    public virtual DbSet<order_item> order_items { get; set; }
    public virtual DbSet<product> products { get; set; }
    public virtual DbSet<product_discount> product_discounts { get; set; }
    public virtual DbSet<product_image> product_images { get; set; }
    public virtual DbSet<shopping_cart> shopping_carts { get; set; }
    public virtual DbSet<support_ticket> support_tickets { get; set; }
    public virtual DbSet<ticket_history> ticket_histories { get; set; }
    public virtual DbSet<ticket_message> ticket_messages { get; set; }
    public virtual DbSet<AccountLog> AccountLog { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<ApplicationUser>(entity => {
            entity.ToTable("Users");
        });

        modelBuilder.Entity<IdentityRole>(entity => {
            entity.ToTable("Roles");
        });

        modelBuilder.Entity<IdentityUserRole<string>>(entity => {
            entity.ToTable("UserRoles");
        });

        modelBuilder.Entity<IdentityUserClaim<string>>(entity => {
            entity.ToTable("UserClaims");
        });

        modelBuilder.Entity<IdentityUserLogin<string>>(entity => {
            entity.ToTable("UserLogins");
            entity.HasKey(l => new { l.LoginProvider, l.ProviderKey });
        });

        modelBuilder.Entity<IdentityUserToken<string>>(entity => {
            entity.ToTable("UserTokens");
            entity.HasKey(t => new { t.UserId, t.LoginProvider, t.Name });
        });

        // Configure chat relationships
        //        modelBuilder.Entity<chat_session>()
        //            .HasOne(cs => cs.Customer)
        //            .WithMany(u => u.ChatSessionsAsCustomer)
        //            .HasForeignKey(cs => cs.CustomerId)
        //            .OnDelete(DeleteBehavior.NoAction);

        //        modelBuilder.Entity<chat_session>()
        //            .HasOne(cs => cs.Seller)
        //            .WithMany(u => u.ChatSessionsAsSeller)
        //            .HasForeignKey(cs => cs.SellerId)
        //            .OnDelete(DeleteBehavior.NoAction);

        //        modelBuilder.Entity<chat_message>()
        //            .HasOne(cm => cm.Sender)
        //            .WithMany(u => u.ChatMessages)
        //            .HasForeignKey(cm => cm.sender_id);



        // Configure discount relationships
        modelBuilder.Entity<discount>()
            .HasOne(d => d.Seller)
            .WithMany(u => u.Discounts)
            .HasForeignKey(d => d.seller_id);

        // Configure order relationships
        modelBuilder.Entity<order>()
            .HasOne(o => o.Buyer)
            .WithMany(u => u.OrdersAsBuyer)
            .HasForeignKey(o => o.buyer_id);
        // Configure order-history relationship
        modelBuilder.Entity<order_history>()
            .HasOne(oh => oh.order)
            .WithMany()
            .HasForeignKey(oh => oh.order_id);
        // Configure product relationships
        modelBuilder.Entity<product>()
            .HasOne(p => p.Seller)
            .WithMany(u => u.Products)
            .HasForeignKey(p => p.seller_id);

        // Configure product-category relationship
        modelBuilder.Entity<product>()
            .HasOne<category>()
            .WithMany()
            .HasForeignKey(p => p.category_id)
            .OnDelete(DeleteBehavior.NoAction);

        // Configure review relationships
        //        modelBuilder.Entity<product_review>()
        //           .HasOne<product>()
        //           .WithMany()
        //           .HasForeignKey(pr => pr.product_id)
        //           .OnDelete(DeleteBehavior.NoAction);
        // Configure order-item relationships
        modelBuilder.Entity<order_item>()
            .HasOne(oi => oi.order)
            .WithMany(o => o.OrderItems)
            .HasForeignKey(oi => oi.order_id);

        modelBuilder.Entity<order_item>()
            .HasOne(oi => oi.product)
            .WithMany()
            .HasForeignKey(oi => oi.product_id);

        modelBuilder.Entity<order_item>()
            .HasOne(oi => oi.Seller)
            .WithMany()
            .HasForeignKey(oi => oi.seller_id)
            .OnDelete(DeleteBehavior.NoAction);

        // Configure shopping cart relationships
        modelBuilder.Entity<shopping_cart>()
            .HasOne(sc => sc.User)
            .WithMany(u => u.ShoppingCarts)
            .HasForeignKey(sc => sc.user_id);
        // Configure product-image relationship
        modelBuilder.Entity<product_image>()
            .HasOne(pi => pi.product)
            .WithMany(p => p.product_images)
            .HasForeignKey(pi => pi.product_id);

        // Configure support ticket relationships
        modelBuilder.Entity<support_ticket>()
            .HasOne(st => st.User)
            .WithMany(u => u.SupportTickets)
            .HasForeignKey(st => st.user_id);

        modelBuilder.Entity<ticket_message>()
            .HasOne(tm => tm.Sender)
            .WithMany(u => u.TicketMessages)
            .HasForeignKey(tm => tm.sender_id);

        // Configure ticket-message relationship
        modelBuilder.Entity<ticket_message>()
            .HasOne<support_ticket>()
            .WithMany()
            .HasForeignKey(tm => tm.ticket_id);

        // Configure notification relationships
        //        modelBuilder.Entity<notification>()
        //            .HasOne(n => n.Recipient)
        //            .WithMany()
        //            .HasForeignKey(n => n.RecipientId)
        //            .OnDelete(DeleteBehavior.NoAction);

        // Configure product-discount relationship
        modelBuilder.Entity<product_discount>()
            .HasOne(pd => pd.product)
            .WithMany()
            .HasForeignKey(pd => pd.product_id);
        modelBuilder.Entity<product_discount>()
    .HasOne(pd => pd.Discount)
    .WithMany(d => d.ProductDiscounts)
    .HasForeignKey(pd => pd.discount_id);

        // Configure audit log properties
        modelBuilder.Entity<audit_log>(entity => {
            entity.Property(e => e.id).HasMaxLength(450);
            entity.Property(e => e.user_id).HasMaxLength(450);
        });

        // Configure order history properties
        modelBuilder.Entity<order_history>(entity => {
            entity.Property(e => e.id).HasMaxLength(450);
            entity.Property(e => e.order_id).HasMaxLength(450);
            entity.Property(e => e.changed_by).HasMaxLength(450);
        });

        // Configure cart item relationships
        modelBuilder.Entity<cart_item>()
            .HasOne(ci => ci.Cart)
            .WithMany(sc => sc.CartItems)
            .HasForeignKey(ci => ci.cart_id);

        modelBuilder.Entity<cart_item>()
            .HasOne(ci => ci.Product)
            .WithMany()
            .HasForeignKey(ci => ci.product_id);

        // Configure category properties and relationships
        modelBuilder.Entity<category>(entity => {
            entity.Property(e => e.id).HasMaxLength(450);
            entity.Property(e => e.parent_category_id).HasMaxLength(450);
            entity.Property(e => e.created_by).HasMaxLength(450);
            entity.Property(e => e.last_modified_by).HasMaxLength(450);
            entity.Property(e => e.deleted_by).HasMaxLength(450);
        });

        modelBuilder.Entity<category>()
            .HasOne(c => c.ParentCategory)
            .WithMany()
            .HasForeignKey(c => c.parent_category_id)
            .OnDelete(DeleteBehavior.NoAction);

        modelBuilder.Entity<category>()
            .HasOne(c => c.CreatedByUser)
            .WithMany()
            .HasForeignKey(c => c.created_by)
            .OnDelete(DeleteBehavior.NoAction);

        modelBuilder.Entity<category>()
            .HasOne(c => c.LastModifiedByUser)
            .WithMany()
            .HasForeignKey(c => c.last_modified_by)
            .OnDelete(DeleteBehavior.NoAction);

        modelBuilder.Entity<category>()
            .HasOne(c => c.DeletedByUser)
            .WithMany()
            .HasForeignKey(c => c.deleted_by)
            .OnDelete(DeleteBehavior.NoAction);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}